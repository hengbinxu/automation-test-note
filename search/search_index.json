{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Automation Testing","text":"<p>The site is used for demonstrated how to set up the automation testing environment</p>"},{"location":"#the-following-links-are-resources-that-we-used","title":"The following links are resources that we used","text":"<ul> <li>Appium</li> <li>Allure Report Framework</li> <li>Docker-Android</li> <li>Docker-Selenium</li> <li>Docker-OSX</li> <li>Selenium Official Site</li> <li>Selenium with Python</li> <li>Pytest</li> </ul>"},{"location":"#learning-path","title":"Learning Path","text":""},{"location":"containerize-env/","title":"Containerize Environment","text":"<p>Different host operating systems and devices have different ways to containerize the runtime environments. More details can refer to belows.</p>"},{"location":"containerize-env/#android-device","title":"Android Device","text":""},{"location":"containerize-env/#ios-device","title":"iOS Device","text":""},{"location":"selenium/","title":"Selenium","text":""},{"location":"selenium/#whats-difference-between-selenium3-and-selenium4","title":"What's difference between <code>Selenium3</code> and <code>Selenium4</code>?","text":"<ul> <li> <p><code>Selenium4</code> adds the new mode which is called <code>distributed mode</code>. It's purpose for containerization and cloud-scalability. More details can refer to selenium official documentation</p> <p> </p> </li> <li> <p>Hub-Node mode</p> <p> </p> </li> <li> <p>Distributed mode</p> <p> </p> </li> <li> <p>Explain what is selenium gird and when to use it</p> </li> </ul>"},{"location":"selenium/#how-dose-appium-register-at-grid-node-between-selenium3-and-selenium4","title":"How dose appium register at grid node between selenium3 and selenium4?","text":"<ul> <li>Selenium3</li> <li> <p>Appium server can be registered by <code>--node-config</code> server parameter. In the node config file you have to define the <code>browserName</code>, <code>version</code> and <code>platform</code> and based on these parameters the gird will redirect your test to the right device. Example for <code>appium --node-config</code></p> <p> </p> </li> <li> <p>Selenium4</p> </li> <li> <p>Appium no longer needs to use <code>--node-config</code> server parameter to register at gird node. Instead, selenium4 adds new feature <code>Relay</code> allows you to proxy Appium requests to an appium server instance.</p> <p> </p> </li> <li> <p>As mentioned before, appium no longer use <code>--node-config</code>, but we have to define the <code>node-config</code> for <code>selenium-node</code>. The <code>node-config</code> use <code>toml</code> format for config file which consists of sections and each sections has options and its respective values.</p> <pre><code># This is an example for node-config.toml\n\n[server]\nport = 5555\n\n[node]\ndetect-drivers = false\n\n\n[relay]\nurl = \"http://localhsot:4723/wd/hub\"\nstatus-endpoint = \"/status\"\nconfigs = [\n    \"1\", \"{\\\"browserName\\\":\\\"Safari\\\", \\\"platformName\\\": \\\"iOS\\\"}\"\n]\n</code></pre> </li> <li> <p>Note: Strongly recommend watching this appium conference which explains how selenium gird work and why selenium4 has <code>relay</code> feature</p> </li> </ul>"},{"location":"selenium/#getting-started-with-selenium-grid","title":"Getting Started with Selenium Grid","text":"<ul> <li> <p>Before starting selenium grid, you have to setup the environment. Please refer to here</p> </li> <li> <p>Download the selenium server and move it to <code>/opt</code> directory</p> </li> <li> <p>Start <code>Selenium Hub</code></p> </li> <li> <p>Open the new terminal and typing the below commands</p> <pre><code># Get ip address\nIP_ADDR=$( ip route get 1.2.3.4 | awk -F \" \" '{print $7}' )\n\n# Start Hub\njava -jar /opt/selenium-server-4.4.0.jar hub\\\n    --publish-events tcp://${IP_ADDR}:4442\\\n    --subscribe-events tcp://${IP_ADDR}:4443\\\n    --port 4444\\\n    --session-request-timeout 60\\\n    --healthcheck-interval 60\\\n    --allow-cors true\n</code></pre> </li> <li> <p>Note: Add parameter <code>--log-level FINEST</code> to adjust the log level for helping debug</p> </li> </ul> <ul> <li> <p>Start Appium</p> </li> <li> <p>Open the new terminal and typing the below command</p> <pre><code>appium -p 4723 \\\n    --relaxed-security \\\n    --session-override \\\n    -ka 300\n</code></pre> </li> <li> <p>Note: If you want to test chrome on your device, you need to download the <code>chrome driver</code> which must confirm the browser version of your device. After downloading the chrome driver, you need to add <code>--chromedriver-executable ${DRIVER_PATH}</code> while starting the appium server.</p> <p> </p> </li> <li> <p>Start <code>Selenium Node</code></p> </li> <li> <p>Open the new terminal and typing the below command</p> <pre><code># Get ip address\nIP_ADDR=$( ip route get 1.2.3.4 | awk -F \" \" '{print $7}' )\n\n# Start Node\njava -jar /opt/selenium-server-4.4.0.jar node\\\n    --publish-events tcp://${IP_ADDR}:4442\\\n    --subscribe-events tcp://${IP_ADDR}:4443\\\n    --port 5555\\\n    --max-sessions 8\\\n    --config \"$( pwd )/node_config.toml\"\n</code></pre> <ul> <li>Note: If <code>selenium hub</code> start on the another machine, the <code>${IP_ADDR}</code> should be set hub machine ip address. And ensure the two machine network can communicate with each other</li> </ul> </li> <li> <p>Check the each terminal after register</p> </li> <li> <p>Selenium Hub      </p> </li> <li> <p>Selenium Node</p> <p> </p> </li> <li> <p>Open <code>http://localhost:4444/ui</code></p> <p> </p> </li> </ul>"},{"location":"selenium/#reference","title":"Reference","text":"<ul> <li>Selenium Official Site</li> <li>How to register appium at selenium grid node?</li> <li>Selenium Grid 4 and Appium together in harmony by Diego Molina #AppiumConf2021</li> <li>Getting started with Selenium Grid</li> </ul>"},{"location":"setup-android-ios-env/","title":"Setup the Environment","text":"<p>Different operation system have the different way to set up the environment. Sorry for windows use, for here, we just offer MacOS and Linux user how to setup the runtime environment.</p>"},{"location":"setup-android-ios-env/#macos","title":"MacOS","text":"<ul> <li>Setup MacOS for Android and iOS Automation</li> </ul>"},{"location":"setup-android-ios-env/#linux","title":"Linux","text":"<ul> <li>Setup Linux for Android and iOS Automation</li> </ul>"},{"location":"system-architecture/","title":"System Architecture","text":""},{"location":"setup-env/linux-setup/","title":"Setup Linux for Android and iOS Automation","text":"<p>Use <code>Ubuntu 20.04</code> as environment</p>"},{"location":"setup-env/linux-setup/#step-1-install-java8openjdk-version-180_342","title":"Step 1: Install Java8(OpenJDK version  \"1.8.0_342\")","text":"<pre><code>sudo apt install openjdk-8-jdk\n</code></pre>"},{"location":"setup-env/linux-setup/#step-2-setup-java-path","title":"Step 2: Setup Java Path","text":"<pre><code># Set Java Path\nexport JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\nexport PATH=\"$JAVA_HOME/bin:$PATH\"\n</code></pre> <p>Verify Java Version</p> <pre><code>java --version\n</code></pre> <p></p>"},{"location":"setup-env/linux-setup/#step-3-install-android-studio","title":"Step 3: Install Android Studio","text":"<ul> <li> <p>Add android studio official repository into your system.</p> <pre><code>sudo apt-add-repository ppa:maarten-fonville/android-studio\n</code></pre> </li> <li> <p>After successfully adding the android repository, you will update your system <code>apt-cache</code> by the follow command</p> <pre><code>sudo apt-update\n</code></pre> </li> <li> <p>After updating <code>apt-cache</code>, it's time to install <code>Android Studio</code> by <code>apt</code> package manager. Below command will help you install it with all its dependencies</p> <pre><code>sudo apt install android-studio\n</code></pre> </li> <li> <p>Launch Android Studio by application launcher searcher. After launching the application, you will need to install <code>Android SDK</code> and <code>SDK Tools</code>.</p> </li> <li> <p>Install Android SDK platform     </p> </li> <li> <p>Install SDK Tools     </p> </li> </ul>"},{"location":"setup-env/linux-setup/#step-4-setup-required-path-for-android-studio","title":"Step 4: Setup Required path for Android Studio","text":"<ul> <li> <p>Open <code>~/.bashrc</code> and add below commands.</p> <pre><code># Android Path\nexport ANDROID_HOME=\"/home/$( whoami )/Android/Sdk\"\nexport PATH=\"$ANDROID_HOME/platform-tools:$PATH\"\nexport PATH=\"$ANDROID_HOME/tools:$PATH\"\nexport PATH=\"$ANDROID_HOME/tools/bin:$PATH\"\nexport PATH=\"$ANDROID_HOME/build-tools/33.0.0:$PATH\"\nexport PATH=\"$ANDROID_HOME/build-tools/33.0.0/bin:$PATH\"\nexport PATH=\"$ANDROID_HOME/emulator:$PATH\"\n</code></pre> </li> <li> <p>Note that this setting <code>ANDROID_HOME</code> and <code>PATH</code> doesn't load into the session. Please execute below commands to make sure all things are right</p> <pre><code># Reload the shell\nexec \"${SHELL}\"\n\necho \"${ANDROID_HOME}\"\n</code></pre> <p></p> <pre><code>echo \"${PATH}\"\n</code></pre> <p></p> </li> <li> <p>Verify android SDK and SDK tools are right or not</p> <pre><code>sdkmanager --list\n\n# It will popup the window\nuiautomatorviewer\n</code></pre> </li> </ul>"},{"location":"setup-env/linux-setup/#step-5-install-nvm","title":"Step 5: Install NVM","text":"<p><code>NMV</code> is an open-source tool used for managing node version</p> <pre><code>sudo apt install curl\ncurl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash\n</code></pre> <pre><code>nvm --version\n</code></pre>"},{"location":"setup-env/linux-setup/#step-6-install-appium","title":"Step 6: Install Appium","text":"<pre><code># Download node.js with v16.17.0\nnvm install v16.17.0\n\n# Set v16.17.0 as node default version\nnvm alias default 16.17\n\n# Install appium and appium-doctor on global\nnpm install -g appium@1.22.3 appium-doctor\n\n# Diagnostic your current environment for iOS\nappium-doctor --ios\n\n# Diagnostic your current environment for android\nappium-doctor --android\n</code></pre>"},{"location":"setup-env/linux-setup/#step-7-install-python-and-tidevices","title":"Step 7: Install Python and tidevices","text":"<ul> <li> <p>Install Python</p> <p>More details can refer to here</p> </li> <li> <p>Install tidevices</p> <p>tidevice is an open-source which is used for communicate with iOS device and execute the WDA(WebDriverAgent) without Xcode.</p> <pre><code>pip install --upgrade pip\n\npip install -U \"tidevice[openssl]\"\n</code></pre> </li> </ul>"},{"location":"setup-env/linux-setup/#step-8-install-required-packages-and-tools","title":"Step 8: Install Required Packages and Tools","text":"<ul> <li> <p>FFmpeg</p> <pre><code>sudo apt update\nsudo apt install ffmpeg\n</code></pre> </li> <li> <p>socat</p> <pre><code>sudo apt update\nsudo apt-get install socat\n</code></pre> </li> <li> <p>libplist</p> <p>A small portable C library to handle Apple Property List files in binary or XML format</p> </li> <li> <p>Install all required dependencies and build tools:</p> <pre><code>sudo apt-get install \\\n    build-essential \\\n    checkinstall \\\n    git \\\n    autoconf \\\n    automake \\\n    libtool-bin \\\n    doxygen \\\n    cython\n</code></pre> </li> <li> <p>Then clone the actual project repository</p> <pre><code>git clone https://github.com/libimobiledevice/libplist.git\ncd libplist\n</code></pre> </li> <li> <p>Build and install it</p> <pre><code>./autogen.sh\nmake\nsudo make install\n</code></pre> </li> <li> <p>libimobiledevice</p> <p>A library to communicate with services on iOS devices using native protocols</p> <pre><code>sudo apt-get install usbmuxd libimobiledevice6 libimobiledevice-utils\n</code></pre> </li> <li> <p>usbfluxd</p> <p>Redirects the standard usbmuxd socket to allow connections to local and remote usbmuxd instances so remote devices appear connected locally.</p> <p>Note: Before installing the usbfluxd, you need to make sure <code>libplist</code> has been installed</p> </li> <li> <p>Clone the repository and change the current directory</p> <pre><code>git clone https://github.com/corellium/usbfluxd.git\ncd usbfluxd\n</code></pre> </li> <li> <p>Build and install it</p> <pre><code>./autogen.sh\nmake\nsudo make install\n</code></pre> </li> <li> <p>Add the new path into <code>~/.bashrc</code></p> <pre><code>export PATH=\"/usr/local/sbin:${PATH}\"\n</code></pre> </li> <li> <p>Verify all installation</p> </li> <li> <p>Prepare an iOS device and and connect to the computer through out the USB cable, then open the terminal typing the below commands</p> <pre><code>systemctl status usbmuxd\n</code></pre> <p></p> </li> <li> <p>If usbmuxd doesn't activate, typing the below command to start it.</p> <pre><code>sudo systemctl start usbmuxd\n</code></pre> </li> <li> <p>After the usbmuxd has been started, then using <code>socat</code> to expose <code>/var/run/usbmuxd</code> on port 5000</p> <pre><code>sudo socat -d -d tcp-listen:5000,fork unix-connect:/var/run/usbmuxd\n</code></pre> <p></p> </li> <li> <p>Open a new terminal and use <code>usbfluxd</code> to redirect the standard <code>usbmuxd</code> socket to allow connections to local and remote device appear locally</p> <pre><code># Get ip address\nIP_ADDR=$( ip route get 1.2.3.4 | awk -F \" \" '{print $7}' )\n\n# Redirect the socket\nsudo usbfluxd -f -r ${IP_ADDR}:5000\n</code></pre> <p></p> </li> </ul>"},{"location":"setup-env/mac-setup/","title":"Setup MacOS for Android and iOS Automation","text":""},{"location":"setup-env/mac-setup/#step-1-install-homebrew","title":"Step 1: Install Homebrew","text":"<p>Homebrew is the most popular MacOS package manager. Homebrew installs packages to their own directory and then symlinks their files into <code>/usr/local.</code></p> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre>"},{"location":"setup-env/mac-setup/#step-2-install-java8openjdk-version-180_292","title":"Step 2: Install Java8(OpenJDK version \"1.8.0_292\")","text":"<p>Install by <code>Homebrew</code></p> <pre><code>brew install --cask adoptopenjdk/openjdk/adoptopenjdk8\n</code></pre> <p>Verify installation by Java cli</p> <pre><code>java -version\n</code></pre> <p></p>"},{"location":"setup-env/mac-setup/#step-3-setup-the-java-version","title":"Step 3: Setup the Java Version","text":"<p>If you use <code>zsh</code>, open <code>~/.zshrc</code> file to add below commands. Otherwise, add into <code>~/.profile</code> file. If your environment has multiple version of Java, make sure using the Java 8.</p> <pre><code># Note:\n# There are many ways to open the `~/.zshrc` file. ex: `vim`, `nano`, etc.\n\n# Use open command to open it, and it will open the file by system default app\nopen ~/.zshrc\n</code></pre> <pre><code># Set Java Path\nexport JAVA_HOME=\"/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home\"\n\nexport PATH=\"/usr/local/Cellar/maven/3.8.6/bin:${PATH}\"\n</code></pre> <p>Note that this setting <code>JAVA_HOME</code> doesn't load into the session. Please execute the below commands to make sure all things are right</p> <pre><code># Reload the shell\nexec \"${SHELL}\"\n\n# Verify the setting\necho \"${JAVA_HOME}\"\n</code></pre> <p></p>"},{"location":"setup-env/mac-setup/#step-4-install-android-studio","title":"Step 4: Install Android Studio","text":"<ol> <li> <p>Download the Android Studio, and launch the application</p> <p></p> </li> <li> <p>Open the app click on Next, and configure and click on <code>finish</code></p> <p></p> </li> <li> <p>Install SDK version as required your project</p> <p></p> <p></p> </li> <li> <p>Install SDK Tools</p> <p></p> </li> <li> <p>Setup the required path, like the Step 3, add below commands into <code>~/.zshrc</code> or <code>~/.profile</code></p> <pre><code># Set Android Path\nexport ANDROID_HOME=\"/Users/$( whoami )/Library/Android/sdk\"\nexport PATH=\"$ANDROID_HOME/platform-tools:$PATH\"\nexport PATH=\"$ANDROID_HOME/tools:$PATH\"\nexport PATH=\"$ANDROID_HOME/tools/bin:$PATH\"\nexport PATH=\"$ANDROID_HOME/build-tools/33.0.0:$PATH\"\nexport PATH=\"$ANDROID_HOME/build-tools/33.0.0/bin:$PATH\"\nexport PATH=\"$ANDROID_HOME/emulator:$PATH\"\n</code></pre> </li> <li> <p>Reload the <code>~/.zshrc</code> and then execute the below command to verify the setting</p> <pre><code># Reload the shell\nexec \"${SHELL}\"\n\nsdkmanager --list\n\n# It will popup the window\nuiautomatorviewer\n</code></pre> </li> </ol>"},{"location":"setup-env/mac-setup/#step-5-install-xcode-from-app-store","title":"Step 5: Install Xcode from app store","text":"<p>Open the app store, and typing xcode on search button then install it</p> <ol> <li> <p>Open the Xcode from applications folder and install required components</p> <p></p> </li> <li> <p>Install command line if you haven't installed</p> <pre><code>xcode-select --install\n</code></pre> </li> <li> <p>Install Carthage</p> <ul> <li> <p>Change the permissions and accept the Xcode license.</p> <pre><code>sudo chown -R $(whoami) /usr/local/share/man/man5 /usr/local/share/man/man7\n\nsudo xcodebuild -license accept\n</code></pre> </li> <li> <p>Install Carthage by homebrew</p> <pre><code>brew install carthage\n</code></pre> </li> </ul> </li> </ol>"},{"location":"setup-env/mac-setup/#step-6-install-appium","title":"Step 6: Install Appium","text":"<p>Install <code>nvm</code> by Homebrew, <code>nvm</code> is node version manager tool</p> <pre><code># nvm is node.js version manager tool\nbrew install nvm\n\n# Download node.js with v16.17.0\nnvm install v16.17.0\n\n# Set v16.17.0 as node default version\nnvm alias default 16.17\n\n# Install appium and appium-doctor on global\nnpm install -g appium@1.22.3 appium-doctor\n\n# Diagnostic your current environment for iOS\nappium-doctor --ios\n\n# Diagnostic your current environment for android\nappium-doctor --android\n</code></pre>"},{"location":"setup-env/mac-setup/#step-7-install-libimobiledevice","title":"Step 7: Install libimobiledevice","text":"<p>libimobiledevice is A cross-platform FOSS library written in C to communicate with iOS devices natively</p> <pre><code>brew install libimobiledevice\n</code></pre>"},{"location":"setup-env/mac-setup/#step-8-install-libplist","title":"Step 8: Install libplist","text":"<ol> <li> <p>Install prerequests packages</p> <pre><code>brew install make automake autoconf libtool pkg-config gcc\n</code></pre> </li> <li> <p>Clone the project</p> <pre><code>git clone https://github.com/libimobiledevice/libplist.git\ncd libplist\n</code></pre> </li> <li> <p>Now you can build and install it</p> <pre><code>./autogen.sh\nmake\nsudo make install\n</code></pre> </li> </ol>"},{"location":"setup-env/mac-setup/#step-9-install-usbmuxd","title":"Step 9: Install usbmuxd","text":"<ol> <li> <p>Clone the project</p> <pre><code>git clone https://github.com/libimobiledevice/usbmuxd.git\ncd usbmuxd\n</code></pre> </li> <li> <p>Now you can build and install it</p> <pre><code>./autogen.sh\nmake\nsudo make install\n</code></pre> </li> </ol>"},{"location":"setup-env/mac-setup/#step-10-install-usbmuxd","title":"Step 10: Install usbmuxd","text":"<ol> <li> <p>Clone the project</p> <pre><code>git clone https://github.com/corellium/usbfluxd.git\ncd usbfluxd\n</code></pre> </li> <li> <p>Now you can build and install it</p> <pre><code>./autogen.sh\nmake\nsudo make install\n</code></pre> </li> </ol>"},{"location":"setup-env/mac-setup/#step-11-setup-required-path","title":"Step 11: Setup required path","text":"<p>Like the Step 3, add below commands into <code>~/.zshrc</code> or <code>~/.profile</code></p> <pre><code>export PATH=\"/usr/local/sbin:${PATH}\"\n</code></pre>"},{"location":"setup-env/mac-setup/#step-12-install-ifuse","title":"Step 12: Install ifuse","text":"<pre><code>brew install ifuse\n</code></pre>"},{"location":"setup-env/mac-setup/#step-13-install-ffmpeg","title":"Step 13: Install ffmpeg","text":"<p>A complete, cross-platform solution to record, convert and stream audio and video.</p> <pre><code>brew install ffmpeg\n</code></pre>"},{"location":"setup-env/mac-setup/#reference","title":"Reference","text":"<ul> <li>Setup Appium on MacOS for Android and iOS App Automation</li> <li>How to Install Appium on MacOS with Required Tools</li> </ul>"},{"location":"setup-env/install-python/install-python/","title":"How to install Pyhton on Linux and MacOS?","text":"<ul> <li>pyenv is an open-source tool used for managing multiple python environments.</li> </ul>"},{"location":"setup-env/install-python/install-python/#macos","title":"MacOS","text":"<ul> <li> <p>Make sure have homebrew installed</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> </li> <li> <p>Install dependencies pyenv requires</p> <pre><code>brew update\nbrew install openssl readline sqlite3 xz zlib\n</code></pre> </li> <li> <p>Install pyenv</p> <pre><code>brew install pyenv\n\n# pyenv virtual environment management plugin\nbrew install pyenv-virtualenv\n</code></pre> </li> <li> <p>Update shell to ensure autocomplete for pyenv is functional</p> <pre><code># Note:\n# If you use zsh, you should update the file ~/.zshrc rather than ~/.bash_profile\n\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.bash_profile\n\necho 'command -v pyenv &gt;/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.bash_profile\n\necho -e 'if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\\n  eval \"$(pyenv init -)\"\\nfi' &gt;&gt; ~/.bash_profile\n\necho -e 'eval \"$(pyenv virtualenv-init -)\"' &gt;&gt; ~/.bash_profile\n\n# Reload the shell\nexec \"$SHELL\"\n</code></pre> </li> </ul>"},{"location":"setup-env/install-python/install-python/#linux","title":"Linux","text":"<ul> <li> <p>Install dependencies pyenv requires</p> <pre><code>sudo apt-get update\n\nsudo apt-get install -y --no-install-recommends \\\n    make \\\n    build-essential \\\n    libssl-dev \\\n    zlib1g-dev \\\n    libbz2-dev \\\n    libreadline-dev \\\n    libsqlite3-dev \\\n    wget \\\n    curl \\\n    llvm \\\n    libncurses5-dev \\\n    xz-utils \\\n    tk-dev \\\n    libxml2-dev \\\n    libxmlsec1-dev \\\n    libffi-dev \\\n    liblzma-dev\n</code></pre> </li> <li> <p>Install pyenv and pyenv-virtualenv</p> <pre><code>curl https://pyenv.run | bash\n</code></pre> </li> <li> <p>Update shell to ensure autocomplete for pyenv is functional</p> <pre><code>export PATH=\"$HOME/.pyenv/bin:$PATH\"\neval \"$(pyenv init --path)\"\neval \"$(pyenv virtualenv-init -)\"\n</code></pre> </li> </ul>"},{"location":"setup-env/install-python/install-python/#how-to-use-pyenv-and-pyenv-virtualenv","title":"How to use pyenv and pyenv-virtualenv?","text":"<ul> <li> <p>List available version that you can install</p> <pre><code>pyenv install --list | grep 3.8\n</code></pre> <p></p> </li> <li> <p>Install the specific version</p> <pre><code># Install Python 3.8.6\npyenv install 3.8.6\n\n# Show current installed versions\npyenv versions\n\n# Set Python 3.8.6 as global version\npyenv global 3.8.6\n</code></pre> <p></p> </li> </ul>"},{"location":"setup-env/install-python/install-python/#pyenv-virtualenv","title":"pyenv-virtualenv","text":"<ul> <li> <p>Create virtual environment by pyenv-virtualenv plugins</p> <pre><code># Use python 3.8.6 to create virtual environment, and its name is `new-env`\npyenv virtualenv 3.8.6 new-env\n</code></pre> <p></p> </li> <li> <p>Activate the virtual environment</p> <pre><code>pyenv activate new-env\n</code></pre> <p></p> </li> <li> <p>Deactivate the virtual environment</p> <pre><code>pyenv deactivate\n</code></pre> </li> <li> <p>Delete the virtual environment</p> <pre><code>pyenv virtualenv-delete -f new-env\n</code></pre> </li> </ul>"},{"location":"setup-env/install-python/install-python/#python-default-venv-module","title":"Python default <code>venv</code> module","text":"<ul> <li> <p>Create a new folder</p> <pre><code>cd ~\nmkdir new-project\ncd new-project\n</code></pre> </li> <li> <p>Create virtual environment</p> <pre><code># Create a new environment directory .venv\npython -m venv .venv\n</code></pre> </li> <li> <p>Activate the virtual environment</p> <pre><code>source .venv/bin/activate\n</code></pre> </li> <li> <p>Deactivate the virtual environment</p> <pre><code>deactivate\n</code></pre> </li> </ul>"}]}